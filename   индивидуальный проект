#Вариант 5

applicants = []
specialties = []
with open('applicant.txt', 'r', encoding='utf-8') as file:
    for line in file:
        data = line.split()  # Разделяем строку на части используя пробел в качестве разделителя, можно указать иной разделитель
        record = {
            'фамилия': data[0],
            'имя': data[1],
            'отчество': data[2],
            'пол': data[3],
            'дата_рождения': data[4],
            'специальность': data[5],
            'стаж': int(data[6]),  # Преобразуем строку со стажем в целое число
            'языки': data[7].split(','),  # Преобразуем строку с языками в список
            'оклад': int(data[8])  # Преобразуем строку с окладом в целое число
        }
        if data[5] not in specialties:
            specialties.append(data[5])
        applicants.append(record)
def print_database(applicants):
    # Функция для вывода базы данных на экран
    print("\nБаза данных о кадровом агентстве:")
    for owner in applicants:
        print(f"Фамилия:{owner['фамилия']},Имя: {owner['имя']},Отчество: {owner['отчество']},пол: {owner['пол']},дата_рождения: {owner['дата_рождения']}, специальность: {owner['специальность']},стаж: {owner['стаж']},язык: {owner['языки']}оклад: {owner['оклад']}")


def add_entry(applicants):
    # Функция для добавления новой записи в базу данных
    new_entry = {}
    new_entry["фамилия"] = input("Введите фамилию: ")
    new_entry["имя"] = input("Введите имя: ")
    new_entry["отчество"] = input("Введите отчество: ")
    new_entry["пол"] = input("Введите пол: ")
    new_entry["дата_рождения"] = input("Введите дату рождения: ")
    new_entry["специальность"] = input("Введите специальность: ")
    new_entry["стаж"] = int(input("Введите стаж: "))
    new_entry["языки"] = input("Введите языки: ")
    new_entry["оклад"] = int(input("Введите оклад: "))
    applicants.append(new_entry)
    print("Запись успешно добавлена.")






# Функция для создания отчета: полный список всех соискателей, отсортированный по специальности + фамилии
def full_list_sorted(applicants):
    n = len(applicants)
    left = 0
    right = n - 1
    while left <= right:
        for i in range(left, right):
            if (applicants[i]['специальность'], applicants[i]['фамилия']) > (applicants[i + 1]['специальность'], applicants[i + 1]['фамилия']):
                applicants[i], applicants[i + 1] = applicants[i + 1], applicants[i]
        right -= 1
        for i in range(right, left, -1):
            if (applicants[i]['специальность'], applicants[i]['фамилия']) < (applicants[i - 1]['специальность'], applicants[i - 1]['фамилия']):
                applicants[i], applicants[i - 1] = applicants[i - 1], applicants[i]
        left += 1
    return applicants

# Функция для создания отчета: список соискателей определенной специальности, отсортированный по стажу, полу и фамилии
def filtered_list_by_specialty(applicants, specialty):
    filtered_applicants = [applicant for applicant in applicants if applicant['специальность'] == specialty]
    n = len(filtered_applicants)
    left = 0
    right = n - 1
    while left <= right:
        for i in range(left, right):
            if (filtered_applicants[i]['стаж'], filtered_applicants[i]['пол'], filtered_applicants[i]['фамилия']) < (filtered_applicants[i + 1]['стаж'], filtered_applicants[i + 1]['пол'], filtered_applicants[i + 1]['фамилия']):
                filtered_applicants[i], filtered_applicants[i + 1] = filtered_applicants[i + 1], filtered_applicants[i]
        right -= 1
        for i in range(right, left, -1):
            if (filtered_applicants[i]['стаж'], filtered_applicants[i]['пол'], filtered_applicants[i]['фамилия']) > (filtered_applicants[i - 1]['стаж'], filtered_applicants[i - 1]['пол'], filtered_applicants[i - 1]['фамилия']):
                filtered_applicants[i], filtered_applicants[i - 1] = filtered_applicants[i - 1], filtered_applicants[i]
        left += 1
    return filtered_applicants


# Функция для создания отчета: список соискателей с окладом в заданном диапазоне, отсортированный по окладу и фамилии
def filtered_list_by_salary_range(applicants, min_salary, max_salary):
    filtered_applicants = [applicant for applicant in applicants if min_salary <= applicant['оклад'] <= max_salary]
    n = len(filtered_applicants)
    left = 0
    right = n - 1
    while left <= right:
        for i in range(left, right):
            if (filtered_applicants[i]['оклад'], filtered_applicants[i]['фамилия']) < (filtered_applicants[i + 1]['оклад'], filtered_applicants[i + 1]['фамилия']):
                filtered_applicants[i], filtered_applicants[i + 1] = filtered_applicants[i + 1], filtered_applicants[i]
        right -= 1
        for i in range(right, left, -1):
            if (filtered_applicants[i]['оклад'], filtered_applicants[i]['фамилия']) > (filtered_applicants[i - 1]['оклад'], filtered_applicants[i - 1]['фамилия']):
                filtered_applicants[i], filtered_applicants[i - 1] = filtered_applicants[i - 1], filtered_applicants[i]
        left += 1
    return filtered_applicants


# Записываем отсортированные данные в файл
while True:
    print("\nМеню:")
    print("1. Вывести базу данных.")
    print("2. Добавить запись.")
    print("3. Полный список всех соискателей (отсортированный).")
    print("4. Cписок соискателей определенной специальности.")
    print("5. Список соискателей с окладом в заданном диапазоне.")
    print("6. Выйти.")

    choice = input("Выберите действие (введите номер): ")

    if choice == "1":
        print_database(applicants)
    elif choice == "2":
        add_entry(applicants)
    elif choice == "3":
        full_list_sorted(applicants)
        with open('sorting_by_last_name+specialty.txt', 'w', encoding='utf-8') as f_out:
            full_sorted = full_list_sorted(applicants)
            f_out.write("Полный список всех соискателей, отсортированный по специальности(по возрастанию) + фамилии(по возрастанию):" + '\n')
            for applicant in full_sorted:
                f_out.write(' '.join(str(applicant[key]) for key in applicant) + '\n')
    elif choice == "4":
        specialty = (input('введите специальность из списка ' +str(specialties) + ':'))
        specialty = specialty.title().strip()
        with open('sorting_by_specialty.txt', 'w', encoding='utf-8') as f_out:
            while (specialty not in specialties):
                print('Данной специальности нет в списке,пожалуйста,введите специальность из списка ' + str(specialties) + ':')
                specialty = input('введите специальность из списка: ')
                specialty = specialty.title().strip()
            sorted_by_specialty = filtered_list_by_specialty(applicants, specialty)
            f_out.write("список соискателей определенной специальности, отсортированный по стажу(по убыванию), полу(по убыванию) и фамилии(по возрастанию):" + '\n')
            for applicant in sorted_by_specialty:
                f_out.write(' '.join(str(applicant[key]) for key in applicant) + '\n')
    elif choice == "5":
        while True:  # Запускаем цикл пока мы не введем нормальный диапазон чисел
            try:
                min_salary, max_salary = map(int, input('введите диопазон желаемого оклада через пробел: ').split()) # Считываем введенное число с клавиатуры
                if min_salary>max_salary:
                    print("Вы ввели диапазон желаемого оклада от",max_salary,'до',min_salary )
                else:
                    print("Вы ввели диапазон желаемого оклада от",min_salary,'до',max_salary )
                    break
            except ValueError:
                print("Ошибка: введенное значение не является числом")

        with open('sorted_by_salary.txt', 'w', encoding='utf-8') as f_out:
            if min_salary>max_salary:
                sorted_by_salary = filtered_list_by_salary_range(applicants, max_salary, min_salary)
            else:
                sorted_by_salary = filtered_list_by_salary_range(applicants, min_salary, max_salary)
            f_out.write("список соискателей с окладом в заданном диапазоне, отсортированный по окладу(по убыванию) и фамилии(по возрастанию):" + '\n')
            for applicant in sorted_by_salary:
                f_out.write(' '.join(str(applicant[key]) for key in applicant) + '\n')
    elif choice == "6":
        break
